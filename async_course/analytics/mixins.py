import logging
from django.utils import timezone
from django.views.generic.detail import SingleObjectMixin

logger = logging.getLogger("async_course.analytics")

class AnalyticsMixin:
    """A View mixin which logs the result of running the view,
    assuming no exceptions were raised. Can infer an analytics 
    message for views descending from Django's generic views;
    otherwise `analytics_message` should be specified.

    This mixin should be first in the list of mixins, or immediately
    following authentication mixins, so that it 
    captures the final response generated by the view.
    """
    analytics_message = None

    def dispatch(self, *args, **kwargs):
        response = super().dispatch(*args, **kwargs)
        self.log_analytics(response)
        return response

    def log_analytics(self, response):
        logger.info(self.get_analytics_message(), 
                extra=self.get_analytics_data(response))

    def get_analytics_message(self):
        return self.analytics_message or self.__class__.__name__

    def get_analytics_data(self, response):
        """Returns a dict of data to be logged.
        """
        if self.request.user.is_authenticated:
            username = self.request.user.username
        else:
            username = None
        data = {
            'date': timezone.now(),
            'user': username,
            'request_method': self.request.method,
            'status_code': response.status_code,
        }
        if hasattr(self, "object") and hasattr(self.object, 'id'):
            data['object_id'] = self.object.id
        else:
            try:
                data['object_id'] = self.get_object().id
            except:
                pass
        return data



